<!DOCTYPE HTML>
<html>
	<head>
		<title>Bddify Test Result @DateTime.Now.ToShortDateString()</title>
		
		<style type="text/css">
			body
			{
				min-width:900px;
				max-width:100%;
				background-color:#fff;
			}
			
			#main
			{
				margin: 0 auto;
				width: 100%;
				background-color:#9090a0;
			}
			
			#header
			{
				height:50px;
				vertical-align:middle;
				background-color:Green;
				padding:10px;
			}
			
			#bddifyTitle
			{
			    font-size:x-large;
			    font-weight:bold;
				color:yellow;
			}
			
			#bddifyDescription
			{
			    font-size:large;
				color:#fff;
			}
			
			#summaryDiv
			{
			    height:210px;
			    margin:5px;
			    padding:5px;
			}
			
			#resultSummary
			{
				float:left;
			}
			
			#coverageSummary
			{
				float:left;
				margin-left:50px;
			}

			#testResult
			{
			    margin:5px;
			    padding:5px;
				float:none;
			}
			
			#testResult table
			{
                background-color:White;
                color:Black;
			}
			
			table
			{
				width:100%;
				padding:5px;
				border-collapse:collapse;
			}
			
			tbody
			{
				text-align:left;
			}
			
			td 
			{
				padding:5px;
			}
			
			td.Passed
			{
				background-color:#009F00;
			}
			
			td.Failed
			{
				background-color:#DF0000;
				font-weight:bold;
			}
			
			td.Inconclusive
			{
				background-color:Yellow
			}
			
			td.NotImplemented
			{
				background-color:Orange
			}
			
			td.NotExecuted
			{
				background-color:#606060;
			}
			
			tr.scenario
			{
				cursor:pointer;
			}
			
			td.scenarioText
			{
				text-decoration:underline;
			}
			
			tr.hasException
			{
				cursor:pointer;
				text-decoration:underline;
			}
			
			th.scenarioHeader
			{
				width:250px    
			}

			th.resultHeader
			{
				width:100px;
			}
			
			th.summaryHeader
			{
				width:100px;    
			}
			
			th.summaryCount
			{
				width:100px;    
			}

			td.duration
			{
				width:100px;
			}
			
			td.indentation
			{
				width:30px;
			}
			
			td.result
			{
				width:150px;
			}
			
			table.summaryTable
			{
				width:250px;
				border-collapse:collapse;
			}
			
			table.summaryTable td
			{
				text-align:left;
			}
			
			tr.assembly
			{
				background-color:#101010;
				color:White;
				height:40px;
			}
			
			tr.namespace
			{
				background-color:#303030;
				color:White;
				height:35px;
			}
			
			tr.step
			{
			    background-color:#eee;
			}
		
		    td.result
		    {
		        width:10px;
		    }
			
			.spacer 
			{ 
				padding-bottom:5px;
			}
		</style>

		<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"> </script>
		<script type="text/javascript">
			$(function () {
			    $('tr.step').hide();
			    $('tr.scenario').click(function () {
			        $('tr.' + $(this).attr('id')).toggle();
			    });
			    $('tr.hasException').click(function () {
			        $('tr.' + $(this).attr('id')).toggle();
			    });
			});
		</script>
	</head>

	<body>
		<div id="main">
			<div id="header">
				<span id="bddifyTitle">Bddify</span>
                <br />
				<span id="bddifyDescription">An awesome BDD framework for .Net developers</span>
			</div>

			<div id="summaryDiv">
                @{
                    string assemblyName = string.Empty;
                    if (Model.Count > 0) { 
                        string assembly = Model[0].Object.GetType().Assembly.CodeBase;
                        assemblyName = "..." + assembly.Substring(assembly.Length - 60);
                    }
                }

                <h4>Summary of Bddify run for '@assemblyName' </h4>

                <div id="innderSummaryDiv">
                    <div id="resultSummary">
				        <table class="summaryTable">
					        <tbody>
						        <tr>
				                    <td class="result Passed"></td>
                			        <td>Passed</td>
							        <td>@Model.Count(b => b.Result == Bddify.Core.StepExecutionResult.Passed)</td>
						        </tr>
						        <tr>
				                    <td class="result Failed"></td>
							        <td>Failed</td>
							        <td>@Model.Count(b => b.Result == Bddify.Core.StepExecutionResult.Failed)</td>
						        </tr>
						        <tr>
				                    <td class="result Inconclusive"></td>
							        <td>Inconclusive</td>
							        <td>@Model.Count(b => b.Result == Bddify.Core.StepExecutionResult.Inconclusive)</td>
						        </tr>
						        <tr>
				                    <td class="result NotImplemented"></td>
							        <td>Not Implemented</td>
							        <td>@Model.Count(b => b.Result == Bddify.Core.StepExecutionResult.NotImplemented)</td>
						        </tr>
						        <tr>
				                    <td class="result NotExecuted"></td>
							        <td>Not Executed</td>
							        <td>@Model.Count(b => b.Result == Bddify.Core.StepExecutionResult.NotExecuted)</td>
						        </tr>
					        </tbody>
				        </table>
                    </div>

                    <div id="coverageSummary">
				        <table class="summaryTable">
					        <tbody>
						        <tr>
							        <td>Assemblies</td>
							        <td>@Model.GroupBy(b => b.Object.GetType().Assembly.CodeBase).Count()</td>
						        </tr>
						        <tr>
							        <td>Namespaces</td>
							        <td>@Model.GroupBy(b => b.Object.GetType().Namespace).Count()</td>
						        </tr>
						        <tr>
							        <td>Test Classes</td>
							        <td>@Model.Count()</td>
						        </tr>
					        </tbody>
				        </table>
                    </div>
                </div>
			</div>

			<div id="testResult">
				<table>
					<tbody>
						@foreach (var group in Model.GroupBy(b => b.Object.GetType().Namespace)){
							<tr class="namespace">
								<td colspan="4">@group.Key</td>
							</tr>

							foreach (var scenario in group) {
								<tr class="scenario" id="@scenario.Id">
									<td class="result @scenario.Result"></td>
									<td class="scenarioText" colspan="3">@scenario.ScenarioText</td>
								</tr>
								foreach (var step in scenario.Steps) {
                                    string stepClass = "step " + scenario.Id;
                                    string result = step.ReadableMethodName;
                                    if(step.Exception != null){
                                        stepClass += " hasException";
                                            
                                        if(!string.IsNullOrEmpty(step.Exception.Message)){
                                            result += " [Exception Message: '" + step.Exception.Message + "']";
                                        }
                                    }

									<tr class="@stepClass" id="@step.Id">
    									<td class="result @step.Result"></td>
										<td class="indentation"></td>
										<td colspan="2">@result</td>
									</tr>

                                    if (step.Exception != null){
									    <tr class="step exceptionDetails @step.Id">
        									<td class="result @step.Result"></td>
    										<td class="indentation"></td>
										    <td class="indentation"></td>
										    <td>@step.Exception.StackTrace</td>
									    </tr>
                                    }
								}

								<!-- empty row to separate scenarios -->
								<tr class="step @scenario.Id spacer">
									<td colspan="4"></td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>
	</body>

</html>