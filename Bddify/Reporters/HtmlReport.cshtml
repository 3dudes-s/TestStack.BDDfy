<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
		<link href="bddify.css" rel="stylesheet" />
		<title>Bddify Test Result @DateTime.Now.ToShortDateString()</title>
	</head>

	<body>
		<div id="main">
			<header>
				<div id="bddifyTitle">bddify</div>
				<div id="bddifyDescription">A simple BDD framework for .Net developers</div>
			</header>

			<section class="summary">
        <h3>Summary</h3>
          
        @{
          var scenarios = Model.SelectMany(s => s.Scenarios).ToList();
          }

				<ul class="resultSummary">
					<li class="namespace">
						<span class="summaryLabel">Namespaces</span>
						<span class="summaryCount">@Model.Where(b => b.MetaData == null).SelectMany(s => s.Scenarios).GroupBy(b => b.TestObject.GetType().Namespace).Count()</span>
					</li>
					<li class="story">
						<span class="summaryLabel">Stories</span>
						<span class="summaryCount">@Model.Where(b => b.MetaData != null).GroupBy(b => b.MetaData.Type).Count()</span>
					</li>
					<li class="Passed">
            <span class="summaryLabel">Passed</span>
						<span class="summaryCount">@scenarios.Count(b => b.Result == Bddify.Core.StepExecutionResult.Passed)</span>
					</li>
					<li class="Failed">
						<span class="summaryLabel">Failed</span>
						<span class="summaryCount">@scenarios.Count(b => b.Result == Bddify.Core.StepExecutionResult.Failed)</span>
					</li>
					<li class="Inconclusive">
						<span class="summaryLabel">Inconclusive</span>
						<span class="summaryCount">@scenarios.Count(b => b.Result == Bddify.Core.StepExecutionResult.Inconclusive)</span>
					</li>
					<li class="NotImplemented">
						<span class="summaryLabel">Not Implemented</span>
						<span class="summaryCount">@scenarios.Count(b => b.Result == Bddify.Core.StepExecutionResult.NotImplemented)</span>
  				</li>
					<li class="NotExecuted">
						<span class="summaryLabel">Not Executed</span>
						<span class="summaryCount">@scenarios.Count(b => b.Result == Bddify.Core.StepExecutionResult.NotExecuted)</span>
					</li>
				</ul>
      </section>

			<div id="testResult">
        @{
          string assemblyName = string.Empty;
          if (Model.Count > 0)
          {
            var scenario = Model.SelectMany(s => s.Scenarios).FirstOrDefault();
            if (scenario != null)
            {
              assemblyName = scenario.TestObject.GetType().Assembly.GetName().Name;
            }
          }
        }

        <h3>Assembly: '@assemblyName'</h3>

				<ul>
          @{
            var groupedByNamespace = from story in Model
                                     where story.MetaData == null
                                     group story by story.Scenarios.First().TestObject.GetType().Namespace into g
                                     select g;

            var groupedByStories = from story in Model
                                   where story.MetaData != null
                                   group story by story.MetaData.Type.Name into g
                                   select g;

            var groupedScenarios = groupedByStories.Union(groupedByNamespace);

            foreach (var scenarioGroup in groupedScenarios)
            {
              var story = scenarioGroup.First();
              var scenariosInGroup = scenarioGroup.SelectMany(s => s.Scenarios);
              var headerClass = story.MetaData == null ? "namespace" : "story";
          <li>
          	<div class="@headerClass">
              @if (story.MetaData == null)
              {
                <span class="@story.Result">Namespace: @story.Scenarios.First().TestObject.GetType().Namespace</span>
              }
              else
              {
                <span class="@story.Result">Story: @story.MetaData.Title</span>
              }

              @if (story.MetaData != null && !string.IsNullOrEmpty(story.MetaData.AsA))
              { 
              <ul class="storyNarrative">
                <li>@story.MetaData.AsA </li>
                <li>@story.MetaData.IWant </li>
                <li>@story.MetaData.SoThat</li>
              </ul>
              }
						</div>

              @foreach (var scenario in scenariosInGroup)
              { 
              <div class="scenario" onclick="toggle('@scenario.Id');">
								<span class="scenarioText @scenario.Result">@scenario.ScenarioText</span>
                
							  <ul class="step" id="@scenario.Id" style="display:none">
                @foreach (var step in scenario.Steps.Where(s => s.ShouldReport))
                {
                  string stepClass = string.Empty;
                  string result = step.ReadableMethodName.Replace(" ", "&nbsp;");
                  if (step.Exception != null)
                  {
                    stepClass = step.Result + "Exception";

                    if (!string.IsNullOrEmpty(step.Exception.Message))
                    {
                      result += " [Exception Message: '" + step.Exception.Message + "']";
                    }
                  }
                  <li class="step @step.Result @stepClass" onclick="toggle('@step.Id');">
										<span>@result</span>

                    @if (step.Exception != null)
                    {
									    <div class="step @stepClass" id="@step.Id">
										    <code>@step.Exception.StackTrace</code>
                      </div>
                    }

									</li>
                }
		  				  </ul>
						  </div>
              }
            </li>
              }
            }
				</ul>

        <p><span>Tested at: @DateTime.Now</span></p>
			</div>
		</div>

    <footer>Powered by <a href="https://code.google.com/p/bddify/">bddify</a> framework</footer>

		<script type="text/javascript">
		  function toggle(id) {
		    var e = document.getElementById(id);
		    if (e.style.display == 'none') {
		      e.style.display = '';
		    }
		    else {
		      e.style.display = 'none';
		    }
		  }
		</script>
	</body>
</html>