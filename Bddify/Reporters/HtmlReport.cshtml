<!DOCTYPE HTML>
<html>
	<head>
		<title>Bddify Test Result @DateTime.Now.ToShortDateString()</title>
		
		<style type="text/css">
			body
			{
				min-width:900px;
				max-width:100%;
				background-color:#fff;
			}
			
			#main
			{
				margin: 0 auto;
				width: 100%;
				text-align:center;
				background-color:#9090a0;
			}
			
			#header
			{
				height:50px;
				background-color:#101010;
				color:White;
			}
			
			#headerText
			{
				padding:10px;
			}
			
			#summaryDiv
			{
				padding:10px;
				margin-bottom:50px;
				margin-top:30px;
			}
			
			#resultSummary
			{
				float:left;
			}
			
			#coverageSummary
			{
				float:left;
				margin-left:50px;
				background-color:Black;
			}

			#coverageSummary table
			{
				color:White;
			}
			
			#testResult
			{
				padding:10px;
				float:none;
			}
			
			#testResult table
			{
                background-color:White;
                color:Black;
			}
			
			table
			{
				width:100%;
				padding:5px;
				border-collapse:collapse;
			}
			
			tbody
			{
				text-align:left;
			}
			
			td 
			{
				padding:5px;
			}
			
			td.Passed
			{
				background-color:#009F00;
			}
			
			td.Failed
			{
				background-color:#DF0000;
				font-weight:bold;
			}
			
			td.Inconclusive
			{
				background-color:Yellow
			}
			
			td.NotImplemented
			{
				background-color:Orange
			}
			
			td.NotExecuted
			{
				background-color:#606060;
			}
			
			tr.scenario
			{
				cursor:pointer;
			}
			
			td.scenarioText
			{
				text-decoration:underline;
			}
			
			tr.hasException
			{
				cursor:pointer;
				text-decoration:underline;
			}
			
			th.scenarioHeader
			{
				width:250px    
			}

			th.resultHeader
			{
				width:100px;
			}
			
			th.summaryHeader
			{
				width:100px;    
			}
			
			th.summaryCount
			{
				width:100px;    
			}

			td.duration
			{
				width:100px;
			}
			
			td.indentation
			{
				width:30px;
			}
			
			td.result
			{
				width:150px;
			}
			
			table.summaryTable
			{
				width:250px;
				border-collapse:collapse;
			}
			
			table.summaryTable td
			{
				text-align:left;
			}
			
			tr.assembly
			{
				background-color:#101010;
				color:White;
				height:40px;
			}
			
			tr.namespace
			{
				background-color:#303030;
				color:White;
				height:35px;
			}
			
			tr.step
			{
			    background-color:#eee;
			}
		
		    td.result
		    {
		        width:10px;
		    }
			
			.spacer 
			{ 
				padding-bottom:5px;
			}
		</style>

		<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"> </script>
		<script type="text/javascript">
			$(function () {
			    $('tr.step').hide();
			    $('tr.scenario').click(function () {
			        $('tr.' + $(this).attr('id')).toggle();
			    });
			    $('tr.hasException').click(function () {
			        $('tr.' + $(this).attr('id')).toggle();
			    });
			});
		</script>
	</head>

	<body>
		<div id="main">
			<div id="header">
				<h1 id="headerText">Bddify Test Result @DateTime.Now.ToShortDateString()</h1>
			</div>

			<div id="summaryDiv">
                <strong>Summary</strong>

                <div id="innderSummaryDiv">
                    <div id="resultSummary">
				        <table class="summaryTable">
					        <tbody>
						        <tr>
							        <td class="Passed">Passed</td>
							        <td class="Passed">@Model.Count(b => b.Result == Bddify.Core.StepExecutionResult.Passed)</td>
						        </tr>
						        <tr>
							        <td class="Failed">Failed</td>
							        <td class="Failed">@Model.Count(b => b.Result == Bddify.Core.StepExecutionResult.Failed)</td>
						        </tr>
						        <tr>
							        <td class="Inconclusive">Inconclusive</td>
							        <td class="Inconclusive">@Model.Count(b => b.Result == Bddify.Core.StepExecutionResult.Inconclusive)</td>
						        </tr>
						        <tr>
							        <td class="NotImplemented">Not Implemented</td>
							        <td class="NotImplemented">@Model.Count(b => b.Result == Bddify.Core.StepExecutionResult.NotImplemented)</td>
						        </tr>
						        <tr>
							        <td class="NotExecuted">Not Executed</td>
							        <td class="NotExecuted">@Model.Count(b => b.Result == Bddify.Core.StepExecutionResult.NotExecuted)</td>
						        </tr>
					        </tbody>
				        </table>
                    </div>

                    <div id="coverageSummary">
				        <table class="summaryTable">
					        <tbody>
						        <tr>
							        <td>Assemblies</td>
							        <td>@Model.GroupBy(b => b.Object.GetType().Assembly.CodeBase).Count()</td>
						        </tr>
						        <tr>
							        <td>Namespaces</td>
							        <td>@Model.GroupBy(b => b.Object.GetType().Namespace).Count()</td>
						        </tr>
						        <tr>
							        <td>Test Classes</td>
							        <td>@Model.Count()</td>
						        </tr>
					        </tbody>
				        </table>
                    </div>
                </div>
			</div>

			<div id="testResult">
				<table>
					<tbody>
						@foreach (var assembly in Model.GroupBy(b => b.Object.GetType().Assembly.CodeBase)) {
							<tr class="assembly">
								<td colspan="5">...@assembly.Key.Substring(assembly.Key.Length - 60)</td>
							</tr>
							foreach (var group in assembly.GroupBy(b => b.Object.GetType().Namespace)){
								<tr class="namespace">
									<td colspan="5">@group.Key</td>
								</tr>

								foreach (var scenario in group) {
									<tr class="scenario" id="@scenario.Id">
										<td class="duration">@scenario.Duration.Milliseconds (ms)</td>
										<td class="scenarioText" colspan="3">@scenario.ScenarioText</td>
										<td class="result @scenario.Result"></td>
									</tr>
									foreach (var step in scenario.Steps) {
                                        string stepClass = "step " + scenario.Id;
                                        string result = step.ReadableMethodName;
                                        if(step.Exception != null){
                                            stepClass += " hasException";
                                            
                                            if(!string.IsNullOrEmpty(step.Exception.Message)){
                                                result += " [Exception Message: '" + step.Exception.Message + "']";
                                            }
                                        }

									    <tr class="@stepClass" id="@step.Id">
										    <td class="duration"></td>
										    <td class="indentation"></td>
										    <td colspan="2">@result</td>
    										<td class="result @step.Result"></td>
									    </tr>

                                        if (step.Exception != null){
									        <tr class="step exceptionDetails @step.Id">
										        <td class="duration"></td>
    										    <td class="indentation"></td>
										        <td class="indentation"></td>
										        <td>@step.Exception.StackTrace</td>
        										<td class="result @step.Result"></td>
									        </tr>
                                        }
									}

									<!-- empty row to separate scenarios -->
									<tr class="step @scenario.Id spacer">
										<td colspan="5"></td>
									</tr>
								}
							}
						}
					</tbody>
				</table>
			</div>
		</div>
	</body>

</html>